name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Build project
      run: cargo build --verbose
    
    - name: Run unit tests
      run: cargo test --lib --verbose
    
    - name: Run integration tests
      run: |
        cargo test --test integration_tests --verbose
        cargo test --test cli_tests --verbose
        cargo test --test plugin_tests --verbose
    
    - name: Run end-to-end tests
      run: ./tests/e2e/run_all_tests.sh
    
    - name: Run comprehensive test suite
      run: ./run_tests.sh

  test-matrix:
    name: Test on multiple Rust versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
    
    - name: Build and test
      run: |
        cargo build --verbose
        cargo test --lib --verbose
        # Only run basic integration tests on non-stable
        if [ "${{ matrix.rust }}" = "stable" ]; then
          ./run_tests.sh
        else
          cargo test --test integration_tests --verbose
        fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  release-build:
    name: Release Build Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build release
      run: cargo build --release --verbose
    
    - name: Test release binary basic functionality
      run: |
        export TIMELOG_RECORD_PATH="/tmp/test-records.csv"
        export TIMELOG_STATE_PATH="/tmp/test-state.json" 
        export TIMELOG_PLUGIN_PATH="/tmp/test-plugins"
        
        # Test basic workflow with release binary
        ./target/release/timelog start "ci test task"
        ./target/release/timelog status
        ./target/release/timelog stop
        ./target/release/timelog report today
